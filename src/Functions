import dataSpotify from "./spotify_data.history.json";

//to get number of all plays count
function getTotalPlays(dataSpotify) {
  return dataSpotify.length;
}






// to get  numbers og all songs with out repeat it 
function getTotalSongs(dataSpotify) {
    const numbersOfSongs = dataSpotify.map((elm) => {
      return elm.master_metadata_track_name;
    });
    return new Set(numbersOfSongs).size;
  }





  // to get  total time all songs that will be played

function getTotalTimePlays(dataSpotify) {
    let totalTimePlays = 0;
    dataSpotify.map((elm) => totalTimePlays += elm.ms_played
    );
    return totalTimePlays;
  }




  
  const TopArtists = () => {
    // إنشاء كائن لتجميع إجمالي عدد المشاهدات لكل فنان
    const artists = [];

    // تجميع إجمالي عدد المشاهدات لكل فنان
    dataSpotify.forEach((item) => {
      const artistName = item.master_metadata_album_artist_name;
      const plays = item.ms_played;

      if (artists.hasOwnProperty(artistName)) {
        artists[artistName] += plays;
      } else {
        artists[artistName] = plays;
      }
    });


    const sortedArtists = Object.entries(artists)
      .sort((a, b) => b - a)
      .slice(0, 10)






    return (
      <div>
        <h2>أعلى 10 فنانين حسب إجمالي عدد المشاهدات</h2>
        <ul>
          {sortedArtists.map(([artistName, plays], index) => (
            <li key={index}>
              <span>{artistName}</span> - <span>{plays}</span>
            </li>
          ))}
        </ul>
      </div>
    );
  };

  const the_TopArtists = TopArtists()







  
  // --------------exrcise 2 top 100 track----------
  function TopTracks() {

    // فرز الأغاني بناءً على وقت الاستماع
    const sortedTracks = dataSpotify.sort((a, b) => b.ms_played - a.ms_played).slice(0, 11)
    console.log(sortedTracks)

   

    return (
      <div>
        <h2>أعلى 10 أغاني حسب وقت الاستماع</h2>
        <ul>
          {sortedTracks.map((track) => (
            <li key={track._id.$oid}>
              <h3>episode_show_name :</h3>{track.episode_show_name} - <h3>ms_played :</h3>{track.ms_played}
            </li>
          ))}
        </ul>
      </div>
    );
  }
  const O_TopTracks = TopTracks()






  function TopAlbums() {
    const data = dataSpotify;

    // إنشاء كائن لتجميع بيانات الألبومات
    const albumMap = {};

    // حساب وقت الاستماع لكل ألبوم
    data.forEach((track) => {
      const albumName = track.master_metadata_album_album_name;
      const msPlayed = track.ms_played;

      if (!albumMap[albumName]) {
        albumMap[albumName] = 0;
      }

      albumMap[albumName] += msPlayed;
    });

    // تحويل الكائن إلى مصفوفة من الألبومات
    const albums = Object.keys(albumMap).map((albumName) => ({
      albumName,
      msPlayed: albumMap[albumName],
    }));

    // فرز الألبومات بناءً على وقت الاستماع
    const sortedAlbums = albums.sort((a, b) => b.msPlayed - a.msPlayed).slice(0, 10);
    
    return (
      <div>
        <h2>أعلى 10 ألبومات حسب وقت الاستماع</h2>
        <ul>
          {sortedAlbums.map((album, index) => (
            <li key={album.albumName}>
              {index + 1}. {album.albumName}

            </li>
          ))}
        </ul>
      </div>
    );
  }
  const O_TopAlbums = TopAlbums()
  // ----------------------------

  return (
    <div>

      <h2>hello</h2>

      <div>{the_TopArtists}</div>
      <div>{O_TopTracks}</div>
      <div>{O_TopAlbums}</div>

    </div>









// to  get Total Time Plays With Out Skipping
function getTotalTimePlaysWithOutSkipping(dataSpotify) {
    let totalTimePlays = 0;
     dataSpotify
   .filter((elem) => elem.reason_end === "trackdone")
    .map((elm) => 
     totalTimePlays += elm.ms_played
   );
  return totalTimePlays
 }





 // get the correct date
function formatDate(dateString) {
    const date = new Date(dateString);
    // console.log(date);
    const year = date.getFullYear();
    //pad start to add 0 if the day or the month was one number
    //January (0) + 1 = 1
    //February (1) + 1 = 2
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const day = String(date.getDate()).padStart(2, "0");
  
    return ${year}-${month}-${day};
  }






  //get hours
function formatDateHours(dateString) {
    const date = new Date(dateString);
    // console.log(date);
    const hours = String(date.getUTCHours()).padStart(2, "0");
    //pad start to add 0 if the Hours 
    return ${hours};
  }




  function averageTimeSpentListening(dataSpotify) {
    // Extract and format the ts values
    const formattedDates = dataSpotify.map((entry) => formatDate(entry.ts));
    //sort from day 0 to last day  && month 1 to 12
    const formattedDatesSorted = formattedDates.sort((a, b) => {
      return new Date(a) - new Date(b);
    });






    //remove the reppet data
  const uniqueDatesSet = new Set(formattedDatesSorted);
  //return it to array
  const formattedDatesSortedBySet = [...uniqueDatesSet];
  //get the avg
  return getTotalTimePlaysWithOutSkipping(dataSpotify)/ formattedDatesSortedBySet.length
}






